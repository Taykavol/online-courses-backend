generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // url      = env("DATABASE_URL")
  url = "postgres://user1:35243524@rc1b-okjjh8lgsfxu3i2l.mdb.yandexcloud.net:6432/db1"
  // url = "postgresql://postgres:3524@localhost:5432"
}

model User {
  id      Int      @default(autoincrement()) @id
  role Role @default(USER)
  email   String? 
  password String? 
  lichessId String? @unique
  googleId String? @unique
  facebookId String? @unique
  VKId Int? @unique
  boughtCourses BoughtCourse[] 
  isBanned Boolean @default(false)
  instructorProfile instructorProfile?
  fullname String? @default("")
  lastLogin DateTime @default(now())
  createdAt DateTime @default(now())
}
model instructorProfile{
  id Int @default(autoincrement()) @id
  user User @relation(fields: [userId], references: [id])
  userId Int
  teacherName String? @default("")
  title Title?
  country String? @default("NO")
  myCourses Course[]
  orders Order[]
  profit Float @default(0.5)
  invoices Invoice[]
  avatar String?
  avatarBackground String?
  aboutMe String?
  publishedCourses Int @default(0)
  registedStudents Int @default(0)
  instructorRating Float @default(0)
  totalReviews Int @default(0)
  // contactEmail String?
  // videos String[]
  paypalId String?
  paymentMethod String? @default("NO")
  paymentInfo Json?
}
model BoughtCourse {
  id Int @default(autoincrement()) @id
  user User @relation(fields: [userId],references:[id])
  userId Int
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  progressOfLessons Boolean[]
  progressOfPuzzles Boolean[]
  progress Int @default(0)
  lastSeen DateTime @default(now())
  review Review? @relation(fields: [reviewId], references:[id])
  reviewId Int?
  
  @@unique([userId,courseId])
  // reviewMessage String?
}
model Order {
  id Int @default(autoincrement()) @id
  price Float
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  buyer User @relation(fields: [buyerId],references:[id])
  buyerId Int
  seller instructorProfile @relation(fields: [sellerId],references:[id])
  sellerId Int
  paymentID String?
  amount Float?
  currency String?
  createdAt DateTime @default(now())
}
model Invoice {
  id Int @default(autoincrement()) @id
  month Int
  year Int 
  profile instructorProfile @relation( fields:[profileId], references:[id])
  profileId Int
  status String? @default("PENDING")
  total Float @default(0)
  createdAt DateTime @default(now())
  @@unique([month,year,profileId])
}

model Course {
id Int @default(autoincrement()) @id
title String @default("")
subtitle String @default("")
author instructorProfile? @relation(fields: [authorId],references:[id])
authorId Int?
description Json?
// forWho String? @default("")
// whatStudentsGet String? @default("")
category String? @default("BASICS")
level Int[] 
sentences String[]
status String? @default("BUILDING")
videos String[]
registedStudents Int @default(0)
lessons Int?
duration Int? @default(0)
price Float @default(20)
orders Order[]
pictureUri String?
promoVideo String?
verificationVideo String?
totalPuzzles Int @default(0)
averageRating Float @default(0)
reviewStats Int[]
updateKey String? @default("")
// numberReviews Int @default(0)
curriculum Json?
reviews Review[]
searchRating Float @default(0)
// totalPurchase Int @default(0)
// totalRevenue Float @default(0)
// forSearchEngines Float @default(0)
createdAt DateTime @default(now()) 
}

model Review {
  id Int @default(autoincrement()) @id
  boughtCourse BoughtCourse?
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  review Int 
  reviewMessage String?
  reviewSubtitle String?
  authorName String?
  createdAt DateTime @default(now()) 
}

model Const {
  name String @unique
  value String
}

enum Title {
  GM
  IM
  FM
  WGM
  WIM
}
enum Role {
  ADMIN
  TEACHER
  USER
}