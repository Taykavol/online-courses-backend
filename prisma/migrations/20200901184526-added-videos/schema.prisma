// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id      Int      @default(autoincrement()) @id
  role Role @default(USER)
  email   String?   @unique
  password String? 
  lichessId String? @unique
  boughtCourses BoughtCourse[] 
  isBanned Boolean @default(false)
  instructorProfile instructorProfile? 
}
model instructorProfile{
  id Int @default(autoincrement()) @id
  user User? @relation(fields: [userId],references:[id])
  userId Int?
  teacherName String?
  title Title?
  myCourses Course[]
  orders Order[]
  videos String[]
  // paypalId String?
}
model BoughtCourse {
  id Int @default(autoincrement()) @id
  user User @relation(fields: [userId],references:[id])
  userId Int
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  progress Int @default(2)
  lastSeen DateTime @default(now())
}
model Order {
  id Int @default(autoincrement()) @id
  price Float
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  buyer User @relation(fields: [buyerId],references:[id])
  buyerId Int
  seller instructorProfile @relation(fields: [sellerId],references:[id])
  sellerId Int
  createdAt DateTime @default(now())
}

model Course {
id Int @default(autoincrement()) @id
title String @default("")
subtitle String @default("")
author instructorProfile? @relation(fields: [authorId],references:[id])
authorId Int?
description String? @default("")
category Category @default(Basics)
level String @default("1500 2000")
status Status? @default(BUILDING)
registedStudents User[] 
lessons Int?
duration Int?
price Float @default(20)
// picture String?
// averageRating Float @default(0)
curriculum String?
// totalPurchase Int @default(0)
// totalRevenue Float @default(0)
// forSearchEngines Float @default(0)
createdAt DateTime @default(now()) 
}

// model Curriculum {
// id Int @default(autoincrement()) @id
// course Course? @relation(fields: [courseId],references:[id])
// courseId Int?
// chapters Chapter[] 
// }

// model Chapter {
// id Int @default(autoincrement()) @id
// curriculum Curriculum @relation(fields: [curriculumID],references:[id])
// curriculumID Int
// order Int
// name String?
// lessons Lesson[]
// }

// model Comment {
// id Int @default(autoincrement()) @id
// user User @relation(fields: [userID],references:[id])
// userID Int
// course Course @relation(fields: [courseID],references:[id])
// courseID Int
// title String
// text String
// }

// model Lesson {
// id Int @default(autoincrement()) @id
// order Int
// name String?
// chapter Chapter @relation(fields: [chapterID],references:[id])
// chapterID Int
// video Video?
// puzzles Puzzle[]
// }

// model Video {
// id Int @default(autoincrement()) @id
// vimeoID Int
// duration Float
// lesson Lesson @relation(fields: [lessonID],references:[id])
// lessonID Int
// }

// model Puzzle {
//   id Int @default(autoincrement()) @id
//   lesson Lesson @relation(fields: [lessonID],references:[id])
//   lessonID Int
//   description String?
//   fen String
//   moves String[]
//   helps String[]
// }
enum Category {
  Openings
  Middlegame
  Endgame
  Games
  Basics
} 
enum Status {
BUILDING
VERIFYING
PUBLISH
UNPUBLISH
}

enum Title {
  GM
  IM
  FM
  WGM
  WIM
}
enum Role {
  ADMIN
  TEACHER
  USER
}


