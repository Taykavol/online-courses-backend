// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["atomicNumberOperations"]
}

model User {
  id      Int      @default(autoincrement()) @id
  role Role @default(USER)
  email   String? 
  password String? 
  lichessId String? @unique
  googleId String? @unique
  facebookId String? @unique
  VKId Int? @unique
  boughtCourses BoughtCourse[] 
  isBanned Boolean @default(false)
  instructorProfile instructorProfile? 
  
  
}
model instructorProfile{
  id Int @default(autoincrement()) @id
  user User? @relation(fields: [userId],references:[id])
  userId Int?
  teacherName String?
  title Title?
  myCourses Course[]
  orders Order[]
  profit Float @default(0.5)
  invoices Invoice[]
  avatar String?
  aboutMe String?
  publishedCourses Int @default(0)
  registedStudents Int @default(0)
  // videos String[]
  paypalId String?
  paymentMethod Payment @default(NO)
}
model BoughtCourse {
  id Int @default(autoincrement()) @id
  user User @relation(fields: [userId],references:[id])
  userId Int
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  progressOfLessons Boolean[]
  progressOfPuzzles Boolean[]
  progress Int @default(0)
  lastSeen DateTime @default(now())
  review Review? @relation(fields: [reviewId], references:[id])
  reviewId Int?
  
  @@unique([userId,courseId])
  // reviewMessage String?
}
model Order {
  id Int @default(autoincrement()) @id
  price Float
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  buyer User @relation(fields: [buyerId],references:[id])
  buyerId Int
  seller instructorProfile @relation(fields: [sellerId],references:[id])
  sellerId Int
  createdAt DateTime @default(now())
}
model Invoice {
  id Int @default(autoincrement()) @id
  month Int
  year Int 
  profile instructorProfile @relation( fields:[profileId], references:[id])
  profileId Int
  status InvoiceStatus @default(PENDING)
  total Float @default(0)
  createdAt DateTime @default(now())
  @@unique([month,year,profileId])
}

model Course {
id Int @default(autoincrement()) @id
title String @default("")
subtitle String @default("")
author instructorProfile? @relation(fields: [authorId],references:[id])
authorId Int?
description Json?
forWho String? @default("")
whatStudentsGet String? @default("")
category Category @default(BASICS)
level Int[] 
sentences String[]
status Status? @default(BUILDING)
videos String[]
registedStudents Int @default(0)
lessons Int?
duration Int? @default(0)
price Float @default(20)
orders Order[]
pictureUri String?
promoVideo String?
totalPuzzles Int @default(0)
averageRating Float @default(0)
reviewStats Int[]
// numberReviews Int @default(0)
curriculum String?
reviews Review[]
searchRating Int @default(0)
// totalPurchase Int @default(0)
// totalRevenue Float @default(0)
// forSearchEngines Float @default(0)
createdAt DateTime @default(now()) 
}

model Review {
  id Int @default(autoincrement()) @id
  boughtCourse BoughtCourse 
  course Course @relation(fields: [courseId],references:[id])
  courseId Int
  review Int 
  reviewMessage String?
  reviewSubtitle String?
  authorName String?
}


enum Payment {
  NO
  PAYPAL
  BINANCE
}
enum InvoiceStatus {
  PAYOUT
  PENDING
}
enum Category {
  OPENINGS
  MIDDLEGAME
  ENDGAME
  GAMES
  BASICS
} 
enum Status {
BUILDING
VERIFYING
PUBLISH
UNPUBLISH
}
enum Level {
  BASIC
  INTERMEDIATE
  ADVANCED
  PROFESSIONAL
}

enum Title {
  GM
  IM
  FM
  WGM
  WIM
}
enum Role {
  ADMIN
  TEACHER
  USER
}


