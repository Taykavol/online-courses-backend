// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url = "***"
}

generator client {
  provider = "prisma-client-js"
}

// model Post {
//   id        Int      @default(autoincrement()) @id
//   createdAt DateTime @default(now())
//   title     String
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }
// model Profile {
//   id     Int     @default(autoincrement()) @id
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }
model User {
  id      Int      @default(autoincrement()) @id
  role Role @default(USER)
  email   String   @unique
  password String?
  publicName    String?
  lichessID String?
  googleID String?
  facebookID String?
  boughtCourses Course[] @relation(references: [id])
  banned Boolean? @default(false)
  // posts   Post[]
  instructorProfile instructorProfile? 
}
model instructorProfile{
id Int @default(autoincrement()) @id
user User @relation(fields: [userID],references:[id])
userID Int
teacherName String?
title Title?
myCourses Course[]
paypalID String?
bitcoinAdress String?
income Int?
}

model Course {
id Int @default(autoincrement()) @id
name String? @default("My new course")
author instructorProfile @relation(fields: [authorID],references:[id])
authorID Int
description String?
category String?
level String?
status Status? @default(BUILDING)
registedStudents User[] @relation(references: [id])
price Float @default(9.99)
priceSale Float @default(9.99)
picture String?
averageRating Float @default(0)
curriculum Chapter[]
comments Comment[]
totalPurchase Int @default(0)
totalRevenue Float @default(0)
forSearchEngines Float @default(0)
createdAt DateTime @default(now()) 
}

model Chapter {
id Int @default(autoincrement()) @id
course Course @relation(fields: [courseID],references:[id])
courseID Int
order Int
name String
lessons Lesson[]
}

model Comment {
id Int @default(autoincrement()) @id
user User @relation(fields: [userID],references:[id])
userID Int
course Course @relation(fields: [courseID],references:[id])
courseID Int
title String
text String
}

model Lesson {
id Int @default(autoincrement()) @id
order Int
name String
chapter Chapter @relation(fields: [chapterID],references:[id])
chapterID Int
video Video 
puzzles Puzzle[]
}

model Video {
id Int @default(autoincrement()) @id
vimeoID Int
duration Float
lesson Lesson @relation(fields: [lessonID],references:[id])
lessonID Int
}

model Puzzle {
  id Int @default(autoincrement()) @id
  lesson Lesson @relation(fields: [lessonID],references:[id])
  lessonID Int
  description String?
  fen String
  moves String[]
  helps String[]
}

enum Status {
BUILDING
VERIFYING
PUBLISH
UNPUBLISH
}

enum Title {
  GM
  IM
  FM
  WGM
  WIM
}
enum Role {
  ADMIN
  USER
}



// type Puzzle = {
// id:ID, 
// lesson:ID,
// order:Interger,
// description:String,
// fen:String!,
// moves:[{move:"",comment:""}]!
// }
// type Video = {
// id:ID
// vimeoID: Integer,
// lesson:ID
// }


// type Lesson = {
// id:ID,
// order:Integer,
// name:String,
// chapter:ID, 
// video:ID
// puzzles:[Puzzle)]
// }

// type Chapter = {
// id:ID,
// order:Integer, 
// name:String,
// lessons:[Lesson],
// }
// type Comment = {
// id:ID,
// author:User,
// title:String,
// text:String,
// reply: Comment
// }
// type Course = {
// id:ID,
// name:String,
// description:String,
// category:String,
// level:String, 
// status:enum["Building","verifying","publish"]
// author:ID (user),
// students:[ID], 
// price:float,
// priceSale:float,
// whyChooseCourse:[String],
// picture:URL,
// curriculum:[Chapter],
// averageRating: Integer [0-5],
// comments:[{comment:String, rating:[0-5]}, reply:String]],
// totalPurchase: Integer,
// forSearchEngine: float,
// createdAt:Date,  
// totalRevenue:float
// }





// type User =  {
// id:ID, 
// name:String,
// username:String!,
// email:String!,
// lichessID:"",
// googleAuth:"",
// facebookAuth:"",
// aboutMe:String,
// title:enum ["GM","IM","FM", "WGM", "WIM"],
// myCourses:[Course],
// boughtCourses:[Course],
// comments:[],
// banned:Boolean, 
// role: enum ["admininstrator","teacher+","teacher","student"]!,

// Student = registed user, Teacher = student + title 
// Teacher+ = Teacher+"PayPal", Admin=god 

// %: Integer,
// }